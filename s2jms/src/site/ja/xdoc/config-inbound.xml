<?xml version="1.0" encoding="UTF-8"?>
<document>
	<properties>
		<title>コンフィグレーション - インバウンド情報</title>
	</properties>
	<body>
		<section name="インバウンド情報">
			<ul>
				<li><p><a href="#概要">概要</a></p></li>
				<li><p><a href="#メッセージエンドポイントの設定">メッセージエンドポイントの設定</a></p>
					<ul>
						<li><p><a href="#ActivationSpecDeployer">ActivationSpecDeployer</a></p></li>
						<li><p><a href="#リソースアダプタ固有のプロパティ">リソースアダプタ固有のプロパティ</a></p></li>
						<li><p><a href="#MessageEndpointFactory">MessageEndpointFactory</a></p></li>
						<li><p><a href="#MessageEndpointActivator">MessageEndpointActivator</a></p></li>
					</ul>
				</li>
				<li><p><a href="#JMSコンテナの設定">JMSコンテナの設定</a></p>
					<ul>
						<li><p><a href="#JMSContainer">JMSContainer</a></p></li>
					</ul>
				</li>
			</ul>
		</section>

		<section name="概要">
			<p>
				インバウンド通信を使用するには，次のコンポーネントを使用します．
			</p>
			<img src="images/inbound-components.png" width="428" height="69"/>
			<dl>
				<dt><code><a href="#ActivationSpecDeployer">ActivationSpecDeployer</a></code></dt>
				<dd>インバウンド通信で利用されるアクティベーションスペックを設定するためのコンポーネントです．</dd>
				<dt><code><a href="#MessageEndpointFactory">MessageEndpointFactory</a></code></dt>
				<dd>インバウンド通信で利用されるメッセージエンドポイントを生成するためのコンポーネントです．</dd>
				<dt><code><a href="#JMSContainer">JMSContainer</a></code></dt>
				<dd>受信したJMSメッセージをアプリケーションコンポーネントにバインドし，リスナメソッドを呼び出すコンポーネントです．</dd>
				<dt><code><a href="#MessageEndpointActivator">MessageEndpointActivator</a></code></dt>
				<dd>インバウンド通信によるメッセージの受信を開始・終了するコンポーネントです．</dd>
			</dl>
		</section>

		<section name="メッセージエンドポイントの設定">
			<subsection name="ActivationSpecDeployer">
				<p>
					<code>ActivationSpecDeployer</code>は，
					リソースアダプタが提供するアクティベーションスペックを利用可能にするためのコンポーネントです．
				</p>
				<p>
					<code>ActivationSpecDeployer</code>の実装クラスを以下に示します．
				</p>
				<ul>
					<li><p><code>org.seasar.jca.deploy.impl.ActivationSpecDeployer</code></p></li>
				</ul>
				<h5>プロパティ</h5>
				<table border="1">
					<tr><th>プロパティ</th><th>必須</th><th>説明</th><th>デフォルト</th></tr>
					<tr>
						<td><code>activationSpecClassName</code></td>
						<td>Yes</td>
						<td>
							リソースアダプタが提供する，
							<code>javax.resource.spi.ActivationSpec</code>の実装クラスを指定します．
						</td>
						<td>N/A</td>
					</tr>
				</table>
				<h5>メソッド</h5>
				<table border="1">
					<tr><th>メソッド</th><th>説明</th></tr>
					<tr>
						<td><code>setProperty(String key, String value)</code></td>
						<td>
							リソースアダプタ固有のプロパティを指定します．
						</td>
					</tr>
				</table>
			</subsection>

			<subsection name="リソースアダプタ固有のプロパティ">
				<p>
					リソースアダプタ固有のプロパティは，使用するリソースアダプタのドキュメントを参照してください．
					主なプロダクトのドキュメントを以下に示します．
				</p>
				<ul>
					<li><p><a href="http://activemq.apache.org/activation-spec-properties.html">Apache ActiveMQ</a></p></li>
					<li><p><a href="https://genericjmsra.dev.java.net/docs/userguide/userguide.html#Resource_Adapter_properties">Sun Generic Resource Adapter for JMS</a>の「Activation Spec Properties」</p></li>
				</ul>
			</subsection>

			<subsection name="MessageEndpointFactory">
				<p>
					<code>MessageEndpointFactory</code>は，
					リソースアダプタからJMSメッセージを受け取るコンポーネントを生成するコンポーネントです．
				</p>
				<p>
					<code>MessageEndpointFactory</code>の実装クラスを以下に示します．
				</p>
				<ul>
					<li><p><code>org.seasar.jms.container.impl.JMSMessageEndpointFactory</code></p></li>
				</ul>
				<h5>プロパティ</h5>
				<table border="1">
					<tr><th>プロパティ</th><th>必須</th><th>説明</th><th>デフォルト</th></tr>
					<tr>
						<td><code>listenerType</code></td>
						<td>No</td>
						<td>
							リスナのインタフェースを指定します．
						</td>
						<td>
							<code><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageListener.html">MessageListener</a></code>
						</td>
					</tr>
					<tr>
						<td><code>endpointClass</code></td>
						<td>No</td>
						<td>
							<code>listenerType</code>プロパティで指定されたリスナインタフェースを実装し，
							<code>org.seasar.jca.inbound.AbstractMessageEndpointImpl</code>を継承したクラスを指定します．
						</td>
						<td>
							<code>JMSMessageEndpointImpl</code>
						</td>
					</tr>
					<tr>
						<td><code>deliveryTransacted</code></td>
						<td>No</td>
						<td>
							メッセージをトランザクショナルに受信するには<code>true</code>を設定します．
						</td>
						<td>
							<code>true</code>
						</td>
					</tr>
				</table>
				<h5>メソッド</h5>
				<table border="1">
					<tr><th>メソッド</th><th>説明</th></tr>
					<tr>
						<td><code>setProperty(String key, String value)</code></td>
						<td>
							リソースアダプタ固有のプロパティを指定します．
						</td>
					</tr>
				</table>
			</subsection>

			<subsection name="MessageEndpointActivator">
				<p>
					<code>MessageEndpointActivator</code>は，
					インバウンド通信によるメッセージの受信を開始・終了するコンポーネントです．
				</p>
				<p>
					このコンポーネントは，<code>app.dicon</code> の最後など，
					SMART deploy や AutoRegister によるコンポーネントの登録が終わった後に
					初期化される場所に定義します．
				</p>
				<p>
					<code>MessageEndpointActivator</code>の実装クラスを以下に示します．
				</p>
				<ul>
					<li><p><code>org.seasar.jca.deploy.impl.MessageEndpointActivator</code></p></li>
				</ul>
				<h5>プロパティ</h5>
				<table border="1">
					<tr><th>プロパティ</th><th>必須</th><th>説明</th><th>デフォルト</th></tr>
					<tr>
						<td><code>activationSpecDeployer</code></td>
						<td>Yes</td>
						<td>
							メッセージエンドポイントの
							<code>ActivationSepcDeployer</code>
							を指定します．
							自動バインディングするには，
							<code>ActivationSepcDeployer</code>の
							コンポーネント名が，このプロパティと同じ
							<code>activationSepcDeployer</code>の
							でなくてはなりません．
							それ以外の場合は明示的にプロパティを設定する必要があります．
						</td>
						<td>N/A</td>
					</tr>
				</table>
			</subsection>
		</section>

		<section name="JMSコンテナの設定">
			<subsection name="JMSContainer">
				<p>
					<code>JMSContainer</code>は，受信したJMSメッセージをアプリケーションコンポーネントにバインドし，
					リスナメソッドを呼び出すコンポーネントです．
				</p>
				<p>
					<code>JMSContainer</code>の実装クラスを以下に示します．
				</p>
				<ul>
					<li><p><code>org.seasar.jms.container.impl.JMSContainerImpl</code></p></li>
				</ul>
				<h5>プロパティ</h5>
				<table border="1">
					<tr><th>プロパティ</th><th>必須</th><th>説明</th><th>デフォルト</th></tr>
					<tr>
						<td><code>filters</code></td>
						<td>No</td>
						<td>
							受信したメッセージを処理するフィルタを指定します．
							通常は自動バインディングされるため，明示的に設定する必要はありません．
							標準的なフィルタは<code>jms-default-filter.dicon</code>に定義されています．
						</td>
						<td>なし</td>
					</tr>
				</table>
				<h5>メソッド</h5>
				<table border="1">
					<tr><th>メソッド</th><th>説明</th></tr>
					<tr>
						<td><code>addMessageListener(String messageListenerName)</code></td>
						<td>
							受信したJMSメッセージを処理するアプリケーションコンポーネントのコンポーネント名を指定します．
							少なくとも一つのコンポーネント名を設定する必要があります．
						</td>
					</tr>
				</table>
				<p>
					diconファイルへの記述は以下のようになります．
				</p>
<source><![CDATA[
    <!-- S2JMS-Container の設定 -->
    <component class="org.seasar.jms.container.impl.JMSContainerImpl">
        <!-- アプリケーションのリスナ・コンポーネントの名前を指定します (複数指定可) -->
        <initMethod name="addMessageListener">
            <arg>"echoListener"</arg>
        </initMethod>
    </component>
]]></source>
			</subsection>
		</section>
	</body>
</document>
