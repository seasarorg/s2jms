<?xml version="1.0" encoding="UTF-8"?>
<document>
	<properties>
		<title>コンフィグレーション</title>
	</properties>
	<body>
		<section name="目次">
			<ul>
				<li><p><a href="#概要">概要</a></p></li>
				<li><p><a href="#リソースアダプタ">リソースアダプタ</a></p></li>
				<li><p><a href="#アウトバウンド通信">アウトバウンド通信</a></p></li>
				<li><p><a href="#インバウンド通信">インバウンド通信</a></p></li>
			</ul>
		</section>

		<section name="概要">
			<p>
				S2JCAを使用してEISと接続するには，リソースアダプタおよびアウトバウンド／インバウンド通信の詳細を設定する必要があります．
			</p>
		</section>

		<section name="リソースアダプタ">
			<p>
				リソースアダプタを使用するには，次のコンポーネントのいずれかを使用します．
			</p>
			<dl>
				<dt><code>org.seasar.jca.deploy.impl.RarResourceAdapterDeployer</code></dt>
				<dd>Rarファイルにパッケージングされているリソースアダプタの場合に使用します．</dd>
				<dt><code>org.seasar.jca.deploy.impl.FsResourceAdapterDeployer</code></dt>
				<dd>ファイルシステム上に展開されているリソースアダプタの場合に使用します．</dd>
				<dt><code>org.seasar.jca.deploy.impl.WmqResourceAdapterDeployer</code></dt>
				<dd>
					<a href="https://genericjmsra.dev.java.net/">Generic Resource Adapter for JMS</a>を使用して
					IBM WebSphere MQ (formerly known MQSeries) と接続する場合に使用します．
				</dd>
			</dl>
			<p>
				いずれの場合も，<code>path</code>プロパティにリソースアダプタのJarファイルまたはディレクトリを設定し，
				リソースアダプタ固有のプロパティを<code>setProperty(String key, String value)</code>メソッドで設定します．
			</p>

			<subsection name="JDBC Connectorの場合">
				<p>
					以下にJDBCドライバを使用してRDBMSと接続する汎用のリソースアダプタ，
					<a href="http://java.sun.com/developer/earlyAccess/jdbc/">JDBC Connector</a>を
					使用する例を示します．
				</p>
<source><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE components PUBLIC "-//SEASAR//DTD S2Container 2.4//EN"
    "http://www.seasar.org/dtd/components24.dtd">
    <include path="j2ee.dicon"/>

    <component class="org.seasar.jca.deploy.impl.RarResourceAdapterDeployer">
        <!-- スレッドプールのスレッド数 -->
        <arg>10</arg>

        <!-- JDBC Connectorへのパス -->
        <property name="path">
            "ra/spi_15_dm.rar"
        </property>
    </component>
]]></source>
				</subsection>

			<subsection name="Apache ActiveMQの場合">
				<p>
					以下にオープンソースのMOMプロダクト，<a href="http://activemq.apache.org/">Apache ActiveMQ</a>を使用する例を示します．
				</p>
<source><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE components PUBLIC "-//SEASAR//DTD S2Container 2.4//EN"
    "http://www.seasar.org/dtd/components24.dtd">
<components>
    <include path="j2ee.dicon"/>

    <component class="org.seasar.jca.deploy.impl.RarResourceAdapterDeployer">
        <!-- スレッドプールのスレッド数 -->
        <arg>10</arg>

        <!-- ActiveMQ ResourceAdapterへのパス -->
        <property name="path">
            "ra/activemq-rar-4.1.1.rar"
        </property>

        <!-- ActiveMQ Broker へのURL -->
        <initMethod name="setProperty">
            <arg>"ServerUrl"</arg>
            <arg>"tcp://localhost:61616?trace=true"</arg>
        </initMethod>
    </component>
</components>
]]></source>
			</subsection>

			<subsection name="IBM WebSphere MQの場合">
				<p>
					以下に<a href="https://genericjmsra.dev.java.net/">Generic Resource Adapter for JMS</a>を使用して
					IBM WebSphere MQ (formerly known MQSeries) と接続する例を示します．
				</p>
<source><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE components PUBLIC "-//SEASAR//DTD S2Container 2.4//EN"
    "http://www.seasar.org/dtd/components24.dtd">
<components>
    <include path="j2ee.dicon"/>

    <component class="org.seasar.jca.deploy.impl.WmqResourceAdapterDeployer">
        <!-- スレッドプールのスレッド数 -->
        <arg>10</arg>

        <!-- Generic JMS ResourceAdapterへのパス -->
        <property name="path">
            "ra/genericra-1.5.rar"
        </property>
    </component>
</components>
]]></source>
			</subsection>

			<subsection name="スレッドプールの設定">
				<p>
					いずれの場合も，<code>ResourceAdapterDeployer</code>のコンストラクタ引数で
					スレッドプールのスレッド数を指定しています．
					この場合，<code>java.util.concurrent.Executors.newFixedThreadPool(int nThreads)</code>で作成された
					スレッドプールが使用されます．
				</p>
				<p>
					異なるスレッドプール実装を使いたい場合は次のように<code>BootstrapContextImpl</code>を定義します．
				</p>
<source><![CDATA[
    <component class="org.seasar.jca.lifecycle.BootstrapContextImpl">
        <arg>
            <component class="org.seasar.jca.work.WorkManagerImpl">
                <arg>
                    @java.util.concurrent.Executors@newCachedThreadPool()
                </arg>
            </component>
        </arg>
    </component>
]]></source>
				<p>
					スレッドプールのスレッドがどのように使われるかはリソースアダプタの実装に依存します．
					リソースアダプタに合わせて適切に設定してください．
					多くの場合，アウトバウンド通信ではスレッドプールはあまり使われていないようです．
					インバウンド通信では同時に処理できるメッセージ／リクエストの数に影響します．
				</p>
			</subsection>
		</section>

		<section name="アウトバウンド通信">
			<p>
				アウトバウンド通信を使用するには，次のコンポーネントを使用します．
			</p>
			<dl>
				<dt><code>org.seasar.jca.deploy.impl.ManagedConnectionFactoryDeployer</code></dt>
				<dd>アウトバウンド通信で利用されるコネクションを設定するためのコンポーネントです．</dd>
			</dl>
			<p>
				<code>ManagedConnectionFactoryDeployer</code>を使用するには，リソースアダプタが提供する
				<code>javax.resource.spi.ManagedConnectionFactory</code>の実装クラスを
				<code>managedConnectionFactoryClass</code>プロパティに設定します．
				リソースアダプタ固有のプロパティを<code>setProperty(String key, String value)</code>メソッドで設定します．
			</p>

			<subsection name="JDBC Connectorの場合">
				<p>
					以下にJDBCドライバを使用してRDBMSと接続する汎用のリソースアダプタ，
					<a href="http://java.sun.com/developer/earlyAccess/jdbc/">JDBC Connector</a>で
					アウトバウンド通信を使用する例を示します．
				</p>
<source><![CDATA[
    <component name="mcfDeployer"
            class="org.seasar.jca.deploy.impl.ManagedConnectionFactoryDeployer">
        <property name="managedConnectionFactoryClass">
            "com.sun.gjc.spi.DMManagedConnectionFactory"
        </property>
        <initMethod name="setProperty">
            <arg>"ClassName"</arg>
            <arg>"org.hsqldb.jdbcDriver"</arg>
        </initMethod>
        <initMethod name="setProperty">
            <arg>"ConnectionURL"</arg>
            <arg>"jdbc:hsqldb:hsql://localhost:9001"</arg>
        </initMethod>
        <initMethod name="setProperty">
            <arg>"User"</arg>
            <arg>"sa"</arg>
        </initMethod>
        <initMethod name="setProperty">
            <arg>"Password"</arg>
            <arg>""</arg>
        </initMethod>
    </component>

    <component name="dataSource" class="javax.sql.DataSource">
        mcfDeployer.createConnectionFactory()
    </component>
]]></source>
			</subsection>

			<subsection name="Apache ActiveMQの場合">
				<p>
					以下にオープンソースのMOMプロダクト，<a href="http://activemq.apache.org/">Apache ActiveMQ</a>で
					アウトバウンド通信を使用する例を示します．
				</p>
<source><![CDATA[
    <component name="mcfDeployer"
            class="org.seasar.jca.deploy.impl.ManagedConnectionFactoryDeployer">
        <property name="managedConnectionFactoryClass">
            "org.apache.activemq.ra.ActiveMQManagedConnectionFactory"
        </property>
    </component>

    <component name="connectionFactory" class="javax.jms.ConnectionFactory">
        mcfDeployer.createConnectionFactory()
    </component>
]]></source>

			<subsection name="IBM WebSphere MQの場合">
				<p>
					以下に<a href="https://genericjmsra.dev.java.net/">Generic Resource Adapter for JMS</a>を使用して
					IBM WebSphere MQ (formerly known MQSeries) で
					アウトバウンド通信を使用する例を示します．
				</p>
<source><![CDATA[
    <component name="mcfDeployer"
            class="org.seasar.jca.deploy.impl.ManagedConnectionFactoryDeployer">
        <property name="managedConnectionFactoryClass">
            "com.sun.genericra.outbound.ManagedJMSConnectionFactory"
        </property>

        <!-- キューマネージャ名 -->
        <initMethod name="setProperty">
            <arg>"connectionFactoryProperties"</arg>
            <arg>"QueueManager=QMGR1"</arg>
        </initMethod>
    </component>

    <component name="connectionFactory" class="javax.jms.ConnectionFactory">
        mcfDeployer.createConnectionFactory()
    </component>
]]></source>
				</subsection>
			</subsection>
		</section>

		<section name="インバウンド通信">
			<p>
				インバウンド通信を使用するには，次のコンポーネントを使用します．
			</p>
			<dl>
				<dt><code>org.seasar.jca.deploy.impl.MessageEndpointDeployer</code></dt>
				<dd>インバウンド通信で利用されるメッセージエンドポイントを設定するためのコンポーネントです．</dd>
				<dt><code>org.seasar.jca.inbound.MessageEndpointFactoryImpl</code></dt>
				<dd>インバウンド通信で利用されるメッセージエンドポイントを生成するためのコンポーネントです．</dd>
			</dl>
			<p>
				<code>MessageEndpointDeployer</code>を使用するには，リソースアダプタが提供する
				<code>javax.resource.spi.ActivationSpec</code>の実装クラスを
				<code>activationSpecClassName</code>プロパティに設定します．
				リソースアダプタ固有のプロパティを<code>setProperty(String key, String value)</code>メソッドで設定します．
			</p>
			<p>
				<code>MessageEndpointFactoryImpl</code>を使用するには，リソースアダプタの使用するリスナインタフェースを
				<code>listenerType</code>プロパティに設定します．
				デフォルトではJMSの<code>javax.jms.MessageListener</code>が設定されます．
				リスナインタフェースを実装し，<code>org.seasar.jca.inbound.AbstractMessageEndpointImpl</code>を継承したクラスを
				<code>endpointClass</code>プロパティに設定します．
				デフォルトではJMSの<code>javax.jms.MessageListener</code>を実装した
				<code>org.seasar.jca.inbound.JMSMessageEndpointImpl</code>が設定されます．
				JMSの<code>javax.jms.MessageListener</code>以外のメッセージエンドポイントを使用する場合は
				<code>org.seasar.jca.inbound.AbstractMessageEndpointImpl</code>を継承した独自のクラスを作成する必要があります．
				メッセージエンドポイントをトランザクショナルに実行するには<code>deliveryTransacted</code>プロパティを
				<code>true</code>に設定します (デフォルト)．<code>false</code>にするとトランザクションは開始されません．
			</p>

			<subsection name="Apache ActiveMQの場合">
				<p>
					以下にオープンソースのMOMプロダクト，<a href="http://activemq.apache.org/">Apache ActiveMQ</a>で
					インバウンド通信を使用する例を示します．
				</p>
<source><![CDATA[
    <component class="org.seasar.jca.deploy.impl.MessageEndpointDeployer">
        <property name="activationSpecClassName">
            "org.apache.activemq.ra.ActiveMQActivationSpec"
        </property>
        <initMethod name="setProperty">
            <arg>"destination"</arg>
            <arg>"foo"</arg>
        </initMethod>
        <initMethod name="setProperty">
            <arg>"destinationType"</arg>
            <arg>"javax.jms.Queue"</arg>
        </initMethod>
    </component>
    <component class="org.seasar.jca.inbound.MessageEndpointFactoryImpl">
        <property name="deliveryTransacted">true</property>
    </component>
]]></source>
			</subsection>

			<subsection name="IBM WebSphere MQの場合">
				<p>
					以下に<a href="https://genericjmsra.dev.java.net/">Generic Resource Adapter for JMS</a>を使用して
					IBM WebSphere MQ (formerly known MQSeries) で
					インバウンド通信を使用する例を示します．
				</p>
<source><![CDATA[
    <component class="org.seasar.jca.deploy.impl.MessageEndpointDeployer">
        <property name="activationSpecClassName">"com.sun.genericra.inbound.ActivationSpec"</property>
        <initMethod name="setProperty">
            <arg>"userName"</arg>
            <arg>"user"</arg>
        </initMethod>
        <initMethod name="setProperty">
            <arg>"password"</arg>
            <arg>"passwork"</arg>
        </initMethod>

        <!-- キューマネージャ名 -->
        <initMethod name="setProperty">
            <arg>"connectionFactoryProperties"</arg>
            <arg>"QueueManager=QMGR1"</arg>
        </initMethod>

        <!-- キュー名 -->
        <initMethod name="setProperty">
            <arg>"destinationProperties"</arg>
            <arg>"BaseQueueName=LQ1"</arg>
        </initMethod>

        <!-- デスティネーションタイプ -->
        <initMethod name="setProperty">
            <arg>"destinationType"</arg>
            <arg>"javax.jms.Queue"</arg><!-- または javax.jms.Topic -->
        </initMethod>
    </component>
    <component class="org.seasar.jca.inbound.MessageEndpointFactoryImpl"/>
]]></source>
			</subsection>
		</section>
	</body>
</document>
